Array.prototype.pMap = function(callback) {
let res = [];
   for (let i = 0; i < this.length; i++) {
      res.push(callback(this[i], i, this));
  }
  return res;
}

const arr = [1,2,3,4];
const newArr = arr.pMap(elem => {
    return elem * 2
});
console.log(newArr);

Array.prototype.myFilter = function(callback, context){ 
    var arr = [];
    for(i=0; i< this.length; i++){
        if(callback.call(context, this[i], i, this)){
            arr.push(this[i])
        }
    }
    return arr;
}

const arrData = [0,1,2,3,4,5,6,7,8,9];
arrData.myFilter((element) => {  
   return ( element % 2 === 0 )
})

Array.prototype.myReduce= function(callbackFn, initialValue) {
  var accumulator = initialValue;
for (var i = 0; i < this.length; i++) {
    if (accumulator !== undefined) {
      accumulator = callbackFn.call(undefined, accumulator, this[i],   i, this);
    } else {
      accumulator = this[i];
    }
  }
  return accumulator;
}
